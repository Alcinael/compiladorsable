/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.lexer;

import java.io.*;
import minijava.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLchave(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRchave(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLparen(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRparen(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLcolchete(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRcolchete(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVirgula(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIgual(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TElse(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhile(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TClass(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPublic(line, pos); }
    Token new14(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TStatic(line, pos); }
    Token new15(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVoid(line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMain(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExtends(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntf(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInt(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReturn(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrint(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTipo(line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBooleano(text, line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOp(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNew(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThis(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVazio(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIntegerLiteral(line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLength(line, pos); }
    Token new33(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPonto(line, pos); }
    Token new34(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TString(line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExclamacao(line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TId(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTokIntegerlit(text, line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReal(text, line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhitespace(text, line, pos); }
    Token new40(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComments(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {33, 33, 4}, {38, 38, 5}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {43, 43, 9}, {44, 44, 10}, {45, 45, 11}, {46, 46, 12}, {47, 47, 13}, {48, 57, 14}, {59, 59, 15}, {60, 60, 16}, {61, 61, 17}, {63, 63, 18}, {65, 82, 19}, {83, 83, 20}, {84, 90, 19}, {91, 91, 21}, {93, 93, 22}, {97, 97, 23}, {98, 98, 24}, {99, 99, 25}, {100, 100, 23}, {101, 101, 26}, {102, 102, 27}, {103, 104, 23}, {105, 105, 28}, {106, 107, 23}, {108, 108, 29}, {109, 109, 30}, {110, 110, 31}, {111, 111, 23}, {112, 112, 32}, {113, 113, 23}, {114, 114, 33}, {115, 115, 34}, {116, 116, 35}, {117, 117, 23}, {118, 118, 36}, {119, 119, 37}, {120, 122, 23}, {123, 123, 38}, {125, 125, 39}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {},
            {{38, 38, 40}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 41}, },
            {{47, 47, 42}, },
            {{46, 46, 43}, {48, 57, 14}, },
            {},
            {},
            {},
            {},
            {{48, 57, 44}, {65, 90, 45}, {95, 95, 46}, {97, 122, 47}, },
            {{48, 95, -21}, {97, 120, 47}, {121, 121, 48}, {122, 122, 47}, },
            {},
            {},
            {{48, 122, -21}, },
            {{48, 95, -21}, {97, 110, 47}, {111, 111, 49}, {112, 122, 47}, },
            {{48, 95, -21}, {97, 107, 47}, {108, 108, 50}, {109, 122, 47}, },
            {{48, 107, -27}, {108, 108, 51}, {109, 119, 47}, {120, 120, 52}, {121, 122, 47}, },
            {{48, 95, -21}, {97, 97, 53}, {98, 122, 47}, },
            {{48, 95, -21}, {97, 101, 47}, {102, 102, 54}, {103, 109, 47}, {110, 110, 55}, {111, 122, 47}, },
            {{48, 95, -21}, {97, 100, 47}, {101, 101, 56}, {102, 122, 47}, },
            {{48, 95, -21}, {97, 97, 57}, {98, 122, 47}, },
            {{48, 100, -31}, {101, 101, 58}, {102, 122, 47}, },
            {{48, 95, -21}, {97, 116, 47}, {117, 117, 59}, {118, 122, 47}, },
            {{48, 100, -31}, {101, 101, 60}, {102, 122, 47}, },
            {{48, 95, -21}, {97, 115, 47}, {116, 116, 61}, {117, 122, 47}, },
            {{48, 95, -21}, {97, 103, 47}, {104, 104, 62}, {105, 113, 47}, {114, 114, 63}, {115, 120, 47}, {121, 121, 64}, {122, 122, 47}, },
            {{48, 110, -26}, {111, 111, 65}, {112, 122, 47}, },
            {{48, 103, -37}, {104, 104, 66}, {105, 122, 47}, },
            {},
            {},
            {},
            {{48, 57, 41}, },
            {{0, 9, 67}, {10, 10, 68}, {11, 12, 67}, {13, 13, 69}, {14, 65535, 67}, },
            {{48, 57, 70}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 95, -21}, {97, 114, 47}, {115, 115, 71}, {116, 122, 47}, },
            {{48, 110, -26}, {111, 111, 72}, {112, 122, 47}, },
            {{48, 95, -21}, {97, 97, 73}, {98, 122, 47}, },
            {{48, 114, -50}, {115, 115, 74}, {116, 122, 47}, },
            {{48, 115, -36}, {116, 116, 75}, {117, 122, 47}, },
            {{48, 107, -27}, {108, 108, 76}, {109, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 115, -36}, {116, 116, 77}, {117, 122, 47}, },
            {{48, 95, -21}, {97, 109, 47}, {110, 110, 78}, {111, 122, 47}, },
            {{48, 95, -21}, {97, 104, 47}, {105, 105, 79}, {106, 122, 47}, },
            {{48, 95, -21}, {97, 118, 47}, {119, 119, 80}, {120, 122, 47}, },
            {{48, 95, -21}, {97, 97, 47}, {98, 98, 81}, {99, 122, 47}, },
            {{48, 115, -36}, {116, 116, 82}, {117, 122, 47}, },
            {{48, 95, -21}, {97, 97, 83}, {98, 113, 47}, {114, 114, 84}, {115, 122, 47}, },
            {{48, 104, -59}, {105, 105, 85}, {106, 122, 47}, },
            {{48, 116, -34}, {117, 117, 86}, {118, 122, 47}, },
            {{48, 95, -21}, {97, 111, 47}, {112, 112, 87}, {113, 122, 47}, },
            {{48, 104, -59}, {105, 105, 88}, {106, 122, 47}, },
            {{48, 104, -59}, {105, 105, 89}, {106, 122, 47}, },
            {{0, 65535, -44}, },
            {{13, 13, 90}, },
            {},
            {{48, 57, 70}, },
            {{48, 115, -36}, {116, 116, 91}, {117, 122, 47}, },
            {{48, 107, -27}, {108, 108, 92}, {109, 122, 47}, },
            {{48, 114, -50}, {115, 115, 93}, {116, 122, 47}, },
            {{48, 100, -31}, {101, 101, 94}, {102, 122, 47}, },
            {{48, 100, -31}, {101, 101, 95}, {102, 122, 47}, },
            {{48, 114, -50}, {115, 115, 96}, {116, 122, 47}, },
            {{32, 32, 97}, {48, 100, -31}, {101, 101, 98}, {102, 122, 47}, },
            {{48, 95, -21}, {97, 102, 47}, {103, 103, 99}, {104, 122, 47}, },
            {{48, 109, -58}, {110, 110, 100}, {111, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 107, -27}, {108, 108, 101}, {109, 122, 47}, },
            {{48, 116, -34}, {117, 117, 102}, {118, 122, 47}, },
            {{48, 115, -36}, {116, 116, 103}, {117, 122, 47}, },
            {{48, 104, -59}, {105, 105, 104}, {106, 122, 47}, },
            {{48, 114, -50}, {115, 115, 105}, {116, 122, 47}, },
            {{48, 100, -31}, {101, 101, 106}, {102, 122, 47}, },
            {{48, 100, -31}, {101, 101, 107}, {102, 122, 47}, },
            {{48, 95, -21}, {97, 99, 47}, {100, 100, 108}, {101, 122, 47}, },
            {{48, 107, -27}, {108, 108, 109}, {109, 122, 47}, },
            {},
            {{48, 100, -31}, {101, 101, 110}, {102, 122, 47}, },
            {{48, 100, -31}, {101, 101, 111}, {102, 122, 47}, },
            {{48, 114, -50}, {115, 115, 112}, {116, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 109, -58}, {110, 110, 113}, {111, 122, 47}, },
            {{48, 100, -31}, {101, 101, 114}, {102, 122, 47}, },
            {{91, 91, 115}, },
            {{48, 102, -80}, {103, 103, 116}, {104, 122, 47}, },
            {{48, 115, -36}, {116, 116, 117}, {117, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 104, -59}, {105, 105, 118}, {106, 122, 47}, },
            {{48, 95, -21}, {97, 113, 47}, {114, 114, 119}, {115, 122, 47}, },
            {{48, 104, -59}, {105, 105, 120}, {106, 122, 47}, },
            {{48, 109, -58}, {110, 110, 121}, {111, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 100, -31}, {101, 101, 122}, {102, 122, 47}, },
            {{48, 95, -21}, {97, 108, 47}, {109, 109, 123}, {110, 122, 47}, },
            {{48, 95, -21}, {97, 97, 124}, {98, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 99, -90}, {100, 100, 125}, {101, 122, 47}, },
            {{48, 122, -21}, },
            {{93, 93, 126}, },
            {{48, 100, -31}, {101, 101, 127}, {102, 122, 47}, },
            {{48, 103, -37}, {104, 104, 128}, {105, 122, 47}, },
            {{48, 95, -21}, {97, 98, 47}, {99, 99, 129}, {100, 122, 47}, },
            {{48, 109, -58}, {110, 110, 130}, {111, 122, 47}, },
            {{48, 98, -120}, {99, 99, 131}, {100, 122, 47}, },
            {{48, 102, -80}, {103, 103, 132}, {104, 122, 47}, },
            {{48, 122, -21}, },
            {{46, 46, 133}, {48, 122, -21}, },
            {{48, 109, -58}, {110, 110, 134}, {111, 122, 47}, },
            {{48, 114, -50}, {115, 115, 135}, {116, 122, 47}, },
            {},
            {{48, 113, -104}, {114, 114, 136}, {115, 122, 47}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{111, 111, 137}, },
            {{48, 122, -21}, },
            {{48, 122, -21}, },
            {{48, 90, -21}, {95, 95, 138}, {97, 122, 47}, },
            {{117, 117, 139}, },
            {{48, 107, -27}, {108, 108, 140}, {109, 122, 47}, },
            {{116, 116, 141}, },
            {{48, 104, -59}, {105, 105, 142}, {106, 122, 47}, },
            {{46, 46, 143}, },
            {{48, 115, -36}, {116, 116, 144}, {117, 122, 47}, },
            {{112, 112, 145}, },
            {{48, 100, -31}, {101, 101, 146}, {102, 122, 47}, },
            {{114, 114, 147}, },
            {{48, 113, -104}, {114, 114, 148}, {115, 122, 47}, },
            {{105, 105, 149}, },
            {{48, 95, -21}, {97, 97, 150}, {98, 122, 47}, },
            {{110, 110, 151}, },
            {{48, 107, -27}, {108, 108, 152}, {109, 122, 47}, },
            {{116, 116, 153}, },
            {{48, 122, -21}, },
            {{108, 108, 154}, },
            {{110, 110, 155}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 39, 39, 39, 35, -1, 2, 3, 27, 27, 7, 27, 33, -1, 37, 6, 27, 8, 30, 36, 36, 4, 5, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 0, 1, 27, 38, -1, 38, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 9, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 40, 40, 38, 36, 36, 36, 36, 36, 36, 19, 36, 36, 28, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 36, 36, 36, 10, 36, 36, -1, 36, 36, 16, 36, 36, 36, 36, 29, 23, 25, 15, 36, 36, 36, 12, 36, 24, -1, 36, 36, 36, 36, 36, 36, 11, 36, 36, 36, 18, 36, 32, 13, 21, 14, 34, -1, 20, 17, 36, -1, 36, -1, 36, -1, 36, -1, 36, -1, 36, -1, 36, -1, 36, -1, 31, -1, -1, 22, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
