/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import minijava.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainclasse(AMainclasse node);
    void caseAClassdecl(AClassdecl node);
    void caseAExtendsClassdecl(AExtendsClassdecl node);
    void caseAVardecl(AVardecl node);
    void caseAMethoddecl(AMethoddecl node);
    void caseAStatementStatement(AStatementStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAIgualStatement(AIgualStatement node);
    void caseAExpigualStatement(AExpigualStatement node);
    void caseAFormallist(AFormallist node);
    void caseAVazioFormallist(AVazioFormallist node);
    void caseAFormalrest(AFormalrest node);
    void caseAIntfType(AIntfType node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAIdType(AIdType node);
    void caseAExporgExp(AExporgExp node);
    void caseAAndExp(AAndExp node);
    void caseAMenorExp(AMenorExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseATimeExp(ATimeExp node);
    void caseAExclamacaoExp(AExclamacaoExp node);
    void caseAIdExp(AIdExp node);
    void caseAThisExp(AThisExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseAIntliteralExp(AIntliteralExp node);
    void caseALengthExp(ALengthExp node);
    void caseAEntreparExp(AEntreparExp node);
    void caseANewintExp(ANewintExp node);
    void caseAExplistExp(AExplistExp node);
    void caseANewidExp(ANewidExp node);
    void caseANovoExp(ANovoExp node);
    void caseAExpexprestExplist(AExpexprestExplist node);
    void caseAVaziodoisExplist(AVaziodoisExplist node);
    void caseAExprestExprest(AExprestExprest node);

    void caseTTkLchave(TTkLchave node);
    void caseTTkRchave(TTkRchave node);
    void caseTTkLparen(TTkLparen node);
    void caseTTkRparen(TTkRparen node);
    void caseTTkLcolchete(TTkLcolchete node);
    void caseTTkRcolchete(TTkRcolchete node);
    void caseTTkSemicolon(TTkSemicolon node);
    void caseTTkVirgula(TTkVirgula node);
    void caseTTkIgual(TTkIgual node);
    void caseTTkIf(TTkIf node);
    void caseTTkElse(TTkElse node);
    void caseTTkWhile(TTkWhile node);
    void caseTTkClass(TTkClass node);
    void caseTTkPublic(TTkPublic node);
    void caseTTkStatic(TTkStatic node);
    void caseTTkVoid(TTkVoid node);
    void caseTTkMain(TTkMain node);
    void caseTTkExtends(TTkExtends node);
    void caseTTkIntf(TTkIntf node);
    void caseTTkInt(TTkInt node);
    void caseTTkBoolean(TTkBoolean node);
    void caseTTkReturn(TTkReturn node);
    void caseTTkPrint(TTkPrint node);
    void caseTTkTrue(TTkTrue node);
    void caseTTkFalse(TTkFalse node);
    void caseTTkTipo(TTkTipo node);
    void caseTTkBooleano(TTkBooleano node);
    void caseTTkPlus(TTkPlus node);
    void caseTTkMinus(TTkMinus node);
    void caseTTkTime(TTkTime node);
    void caseTTkAnd(TTkAnd node);
    void caseTTkMenor(TTkMenor node);
    void caseTTkNew(TTkNew node);
    void caseTTkThis(TTkThis node);
    void caseTTkVazio(TTkVazio node);
    void caseTTkIntegerLiteral(TTkIntegerLiteral node);
    void caseTTkLength(TTkLength node);
    void caseTTkPonto(TTkPonto node);
    void caseTTkString(TTkString node);
    void caseTTkExclamacao(TTkExclamacao node);
    void caseTTkId(TTkId node);
    void caseTTkTokIntegerlit(TTkTokIntegerlit node);
    void caseTTkReal(TTkReal node);
    void caseTTkWhitespace(TTkWhitespace node);
    void caseTTkComments(TTkComments node);
    void caseEOF(EOF node);
}
