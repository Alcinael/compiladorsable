Package minijava;

Helpers
	digit = ['0'..'9'];
	letters = ['a'..'z'];
	upletters = ['A'..'Z'];

Tokens
	tk_lchave = '{';
	tk_rchave = '}';
	tk_lparen = '(';
	tk_rparen = ')';
	tk_lcolchete = '[';
	tk_rcolchete = ']';
	tk_semicolon = ';';
	tk_virgula = ',';
	tk_igual = '=';
	tk_if = 'if';
	tk_else = 'else';
	tk_while = 'while';
	tk_class = 'class';
	tk_public = 'public';
	tk_static = 'static';
	tk_void = 'void';
	tk_main = 'main';
	tk_extends = 'extends';
	tk_intf = 'int []';
	tk_int = 'int';
	tk_boolean = 'boolean';
	tk_return = 'return';
	tk_print = 'System.out.println';
	tk_true = 'true';
	tk_false = 'false';
	tk_tipo = 'type';
  	tk_booleano = 'true'|'false';
	tk_plus = '+';
	tk_minus = '-';
	tk_time='*';
	tk_and = '&&';
	tk_menor = '<';
	tk_new = 'new';
	tk_this = 'this';
	tk_vazio = '?';
	tk_integer_literal = 'integer_literal';
	tk_length = 'length';
	tk_ponto = '.';
	tk_string = 'string';
	tk_exclamacao = '!';
	tk_id = (letters|upletters) (letters|digit|'_'|upletters)*;
	tk_tok_integerlit = digit+;
	tk_real = ((digit)+ '.' (digit)*) | ((digit)* '.' (digit)+);
	tk_whitespace = (' ' | 9 | 10 | 13)+;
	tk_comments = ('/''/'[[0 .. 0xffff] - [10 + 13]]* (10|13|10 13)) | ('/''*'[0 .. 0xffff]* '*''/');

Ignored Tokens
	tk_whitespace,
	tk_comments;


Productions
	program{->program} = {program} mainclasse classdecl* {-> New program (mainclasse, [classdecl])};

	mainclasse{-> mainclasse}  = {mainclasse} tk_class [left]:tk_id [left2]:tk_lchave tk_public tk_static tk_void tk_main tk_lparen tk_string tk_lcolchete tk_rcolchete [right]:tk_id tk_rparen [right2]:tk_lchave statement [left3]:tk_rchave [right3]:tk_rchave{-> New mainclasse(left, right, statement)};

	classdecl{-> classdecl} =
		{classdecl} tk_class tk_id tk_lchave vardecl* methoddecl* tk_rchave {-> New classdecl.classdecl(tk_id, [vardecl], [methoddecl])} |
		{extends}tk_class [left]:tk_id tk_extends [right]:tk_id tk_lchave vardecl* methoddecl* tk_rchave {->New classdecl.extends(left, right, [vardecl], [methoddecl])};

	vardecl{-> vardecl} =
		{vardecl} type tk_id {-> New vardecl.vardecl(type, tk_id)};

	methoddecl{-> methoddecl} =
		{methoddecl} tk_public type tk_id tk_lparen formallist tk_rparen tk_lchave vardecl* statement* tk_return exp tk_semicolon tk_rchave {-> New methoddecl.methoddecl(type, tk_id, formallist, [vardecl], [statement], exp)};

	formallist{-> formallist} =
		type tk_id formalrest* {-> New formallist(type, [formalrest])}|
		{vazio}tk_vazio {->New formallist.vazio(tk_vazio)};

	formalrest {-> formalrest} =
		{formalrest}tk_virgula type tk_id {->New formalrest.formalrest(type, tk_id)} ;

	type{-> type} =
		{intf} tk_intf {->New type.intf(tk_intf)}|
		{boolean} tk_boolean {->New type.boolean(tk_boolean)} |
		{int} tk_int {-> New type.int(tk_int)}|
		{id} tk_id {->New type.id(tk_id)};

	statement{-> statement} =
		{statement} tk_lchave statement* tk_rchave {->New statement.statement([statement])}|
		{if} tk_if tk_lparen exp tk_rparen [left]:statement tk_else [right]:statement {-> New statement.if(exp, left.statement, right.statement)} |
		{while} tk_while tk_lparen exp tk_rparen statement {-> New statement.while(exp, statement)}|
		{print} tk_print tk_lparen exp tk_rparen tk_semicolon {-> New statement.print(exp)}|
		{igual} tk_id tk_igual exp tk_semicolon {->New statement.igual(tk_id, exp)}|
		{expigual} tk_id tk_lcolchete [left]:exp tk_rcolchete tk_igual [right]:exp tk_semicolon {-> New statement.expigual(tk_id, left.exp, right.exp)} ;

	exp {-> exp} = 
		{exporg} [left]:exp tk_lcolchete [right]:term tk_rcolchete {-> New exp.exporg(left.exp, right.exp)}|
		{term}term {-> term.exp};
       
	term {-> exp} = 
		{and} [left]:term tk_and [right]:med {-> New exp.and(left.exp, right.exp)} |
		{menor} [left]:term tk_menor [right]:med  {-> New exp.menor(left.exp, right.exp)} |
		{med}med {-> med.exp};

	med {-> exp} = 
		{plus} [left]:med tk_plus [right]:low {-> New exp.plus(left.exp, right.exp)} |
		{minus} [left]:med tk_minus [right]:low {-> New exp.minus(left.exp, right.exp)} |
		{low}low {->low.exp};

	low {-> exp} = 
		{exclamacao}tk_exclamacao [not]:factor {-> New exp.exclamacao(not.exp)} |
 		{time} [left]:low tk_time [right]:factor {-> New exp.time(left.exp, right.exp)} |
		{factor}factor {-> factor.exp};

	factor {->exp} = 
		{length} [only]:factor tk_ponto tk_length {-> New exp.length(only.exp)} |
		{novo} [only]:factor tk_ponto tk_id tk_lparen explist tk_rparen {-> New exp.novo(only.exp,explist)}|
		{newint}tk_new tk_int tk_lcolchete [only]:factor tk_rcolchete {-> New exp.newint(only.exp)}|
		{entrepar}tk_lparen [only]:factor tk_rparen {-> New exp.entrepar(only.exp)}|
		{intliteral}tk_integer_literal {-> New exp.intliteral(tk_integer_literal)}|
		{true}tk_true {-> New exp.true(tk_true)}|
		{false}tk_false {->New exp.false(tk_false)}|
		{id}tk_id {->New exp.id(tk_id)}|
		{this}tk_this {->New exp.this(tk_this)}|
		{newid}tk_new tk_id tk_lparen tk_rparen {->New exp.newid(tk_id)};


	explist {->explist} =
		{expexprest}exp exprest* {-> New explist.expexprest(exp, [exprest])} |
		{vaziodois}tk_vazio {-> New explist.vaziodois(tk_vazio)};

	exprest {->exprest} =
		tk_virgula exp {-> New exprest.exprest(exp)};


Abstract Syntax Tree

	program = 
		mainclasse classdecl*;

	mainclasse = 
		[left]:tk_id [right]:tk_id statement;

	classdecl = 
		{classdecl} tk_id vardecl* methoddecl* |
		{extends} [left]:tk_id [right]:tk_id vardecl* methoddecl*;

	vardecl =
		{vardecl} type tk_id;

	methoddecl = 
		{methoddecl} type tk_id formallist vardecl* statement* exp;

	statement =
		{statement} statement* |
		{if} exp [true]:statement [false]:statement |
		{while} exp statement |
		{print} exp |
		{igual}  tk_id exp |
		{expigual} tk_id [left]:exp [right]:exp;

	formallist = 
		type formalrest* |
	  	{vazio} tk_vazio;

	formalrest =
		{formalrest} type tk_id;

	type =
		{intf} tk_intf |
		{boolean} tk_boolean |
		{int} tk_int |
		{id} tk_id ;
	exp =	
		{exporg} [left]:exp [right]:exp|
		{and} [left]:exp [right]:exp |
		{menor} [left]:exp [right]:exp |
		{plus}  [left]:exp [right]:exp |
		{minus} [left]:exp [right]:exp |
		{time}  [left]:exp [right]:exp |
		{exclamacao} exp |
		{id}  tk_id |
		{this} tk_this |
		{true}  tk_true |
		{false} tk_false |
		{intliteral} tk_integer_literal|
		{length} exp |
		{entrepar} exp |
		{newint} exp |
		{explist} exp  explist |
		{newid} tk_id|
		{novo} exp explist;

	explist = 
		{expexprest} exp exprest*|
		{vaziodois} tk_vazio ;

	exprest =
		{exprest} exp;

