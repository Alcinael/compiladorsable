Package minijava;

Helpers
	digit = ['0'..'9'];
	letters = ['a'..'z'];
	upletters = ['A'..'Z'];

Tokens
	tk_lchave = '{';
	tk_rchave = '}';
	tk_lparen = '(';
	tk_rparen = ')';
	tk_lcolchete = '[';
	tk_rcolchete = ']';
	tk_semicolon = ';';
	tk_virgula = ',';
	tk_igual = '=';
	tk_if = 'if';
	tk_else = 'else';
	tk_while = 'while';
	tk_class = 'class';
	tk_public = 'public';
	tk_static = 'static';
	tk_void = 'void';
	tk_main = 'main';
	tk_extends = 'extends';
	tk_intf = 'int []';
	tk_int = 'int';
	tk_boolean = 'boolean';
	tk_return = 'return';
	tk_print = 'System.out.println';
	tk_true = 'true';
	tk_false = 'false';
	tk_tipo = 'type';
  tk_booleano = 'true'|'false';
	tk_op = '&&'|'+'|'-'|'*'|'<';
	tk_new = 'new';
	tk_this = 'this';
	tk_vazio = '?';
	tk_integer_literal = 'integer_literal';
	tk_length = 'length';
	tk_ponto = '.';
	tk_string = 'string';
	tk_exclamacao = '!';
	tk_id = (letters|upletters) (letters|digit|'_'|upletters)*;
	tk_tok_integerlit = digit+;
	tk_real = ((digit)+ '.' (digit)*) | ((digit)* '.' (digit)+);
	tk_whitespace = (' ' | 9 | 10 | 13)+;
  //comments = ('/''/' ([0...0xffff]-[10|13])* (10 13))
	tk_comments = ('/''/'[[0 .. 0xffff] - [10 + 13]]* (10|13|10 13)) | ('/''*'[0 .. 0xffff]* '*''/');

Ignored Tokens
	tk_whitespace,
	tk_comments;


Productions
	program = {program} mainclass classdecl*;

	mainclass  = {mainclass} tk_class [left]:tk_id [left2]:tk_lchave tk_public tk_static tk_void tk_main tk_lparen tk_string tk_lcolchete tk_rcolchete [right]:tk_id tk_rparen [right2]:tk_lchave statement [left3]:tk_rchave [right3]:tk_rchave;

	classdecl =
		{classdecl} tk_class tk_id tk_lchave vardecl* methoddecl* tk_rchave |
		tk_class [left]:tk_id tk_extends [right]:tk_id tk_lchave vardecl* methoddecl* tk_rchave;

	vardecl =
		{vardecl} type tk_id;

	methoddecl =
		tk_public type tk_id tk_lparen formallist tk_rparen tk_lchave vardecl* statement* tk_return exp tk_semicolon tk_rchave;

	formallist ={formallist} type tk_id formalrest*|
		tk_vazio;

	formalrest =
		tk_virgula type tk_id;

	type =
		{intf} tk_intf |
		{boolean} tk_boolean |
		{int} tk_int |
		{id} tk_id;

	statement =
		{statement} tk_lchave statement* tk_rchave |
		{if} tk_if tk_lparen exp tk_rparen [left]:statement tk_else [right]:statement |
		{while} tk_while tk_lparen exp tk_rparen statement |
		{print} tk_print tk_lparen exp tk_rparen tk_semicolon |
		{igual} tk_id tk_igual exp tk_semicolon |
		{expigual} tk_id tk_lcolchete [left]:exp tk_rcolchete tk_igual [right]:exp tk_semicolon ;

	exp =
		{op} [left]:exp tk_op [right]:exp |
		{exp} [left]:exp tk_lcolchete [right]:exp tk_rcolchete |
		{length} exp tk_ponto tk_length |
		{explist} exp tk_ponto tk_id tk_lparen explist tk_rparen |
		{intliteral}tk_integer_literal |
		{true}tk_true |
		{false}tk_false |
		{id}tk_id |
		{this}tk_this |
		{newint}tk_new tk_int tk_lcolchete exp tk_rcolchete |
		{newid}tk_new tk_id tk_lparen tk_rparen |
		{exclamacao}tk_exclamacao exp |
		{entrepar}tk_lparen exp tk_rparen;

	explist =
		{exprest}exp exprest*|
		tk_vazio;

	exprest =
		tk_virgula exp;

